//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "map")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub ap_map_id: i32,
    pub author: i32,
    #[sea_orm(unique)]
    pub gbx_mapuid: String,
    pub map_name: String,
    pub votes: i32,
    pub uploaded: TimeDateTimeWithTimeZone,
    pub created: TimeDateTimeWithTimeZone,
    pub author_time: i32,
    pub gold_time: i32,
    pub silver_time: i32,
    pub bronze_time: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ap_user::Entity",
        from = "Column::Author",
        to = "super::ap_user::Column::ApUserId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ApUser,
    #[sea_orm(has_many = "super::map_data::Entity")]
    MapData,
    #[sea_orm(has_many = "super::map_tag::Entity")]
    MapTag,
    #[sea_orm(has_many = "super::map_thumbnail::Entity")]
    MapThumbnail,
}

impl Related<super::ap_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApUser.def()
    }
}

impl Related<super::map_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MapData.def()
    }
}

impl Related<super::map_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MapTag.def()
    }
}

impl Related<super::map_thumbnail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MapThumbnail.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
